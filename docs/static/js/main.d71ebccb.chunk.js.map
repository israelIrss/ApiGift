{"version":3,"sources":["components/AddCategori.js","helpers/getGifs.js","components/GiftGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategori","props","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GiftGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6LAGaA,EAAc,SAACC,GAAW,IAC7BC,EAAeD,EAAfC,cAD4B,EAEEC,mBAAS,IAFX,mBAE3BC,EAF2B,KAEfC,EAFe,KAgBlC,OACI,sBAAMC,SAVS,SAACC,GAChBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAiBO,OACnCN,EAAc,MAMlB,SAEI,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAnBiB,SAACP,GAEtBF,EAAcE,EAAEQ,OAAOF,aAyB/Bb,EAAYgB,UAAU,CAClBd,c,OAAce,EAAUC,KAAKC,Y,oCClCpBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAWZM,GAXY,4CAAH,sDCEPO,EAAe,SAACnC,GAAW,IAC/BgC,EAAWhC,EAAXgC,MAAMV,EAAKtB,EAALsB,IACX,OACI,sBAAKc,UAAU,yCAAf,UACG,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFFO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAc,IAAD,EACZlB,mBAAS,CAC/ByB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAetC,OAVAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAM,SAAAC,GACpBH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAIjB,CAACpB,IAEGqB,EDXqBK,CAAa1B,GAA9Ba,EAFwB,EAE7BN,KAAYa,EAFiB,EAEjBA,QAClB,OACI,qCACI,6BAAKpB,IACLoB,GAAW,wCACX,qBAAKJ,UAAU,YAAf,SAEYH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAA+BA,GAAZA,EAAIC,aEXtCgB,EAAe,WAAM,MAEM7C,mBAAS,CAAC,iBAFhB,mBAEvB8C,EAFuB,KAEX/C,EAFW,KAQ9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACK+C,EAAWnB,KAAI,SAAAT,GAAQ,OAEpB,cAAC,EAAD,CAASA,SAAUA,GAAeA,YCftD6B,IAASC,OAEP,cAAC,EAAD,IAEAC,SAASC,eAAe,U","file":"static/js/main.d71ebccb.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from \"prop-types\";\n\nexport const AddCategori = (props) => {\n    const{setCategories}=props;\n    const [inputValue, setInputValue] = useState('')\n    const handleInputChange =(e)=>{\n\n        setInputValue(e.target.value);\n    }\n    const handleSubmit=(e)=>{\n        e.preventDefault();\n        if(inputValue.trim().length>2){\n            setCategories(cats=>[inputValue,...cats]);\n            setInputValue('');\n\n\n        }\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n\n            < input \n            type='text'\n            value={inputValue}\n            onChange={handleInputChange }\n            />\n            \n            \n        </form>\n    )\n}\n\nAddCategori.prototype={\n    setCategories:PropTypes.func.isRequired\n}\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=LPwfoZpgDb9oDAmfDUPLm8QP1NZZ1VvQ`\n    const resp = await fetch(url)\n    const { data } = await resp.json();\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return(gifs)\n   \n}\n","import React from 'react'\n\nexport const GiftGridItem = (props) => {\n   const{title,url}=props;\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n           <img src={url} alt={title}/>\n           <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n\nimport { GiftGridItem } from \"./GiftGridItem\";\n\nexport const GifGrid = ({category}) => {\n\n   const {data:images,loading}= useFetchGifs(category);\n    return (\n        <>\n            <h3>{category}</h3>\n           {loading && <p>Loading</p>}\n            <div className='card-grid'>\n                    {\n                        images.map(img => (\n                            <GiftGridItem key={img.id} {...img} />\n                        ))\n                    }  \n            </div>\n        </>\n    )\n}\n","import {getGifs} from '../helpers/getGifs'\nimport { useState, useEffect } from 'react'\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n    useEffect(() => {\n        getGifs(category).then( imgs =>{\n            setState({\n                data:imgs,\n                loading:false\n            })\n        })\n\n    }, [category])\n    \n    return state;\n}\n\n","import React,{useState} from 'react'\nimport './index.css'\nimport { AddCategori } from \"./components/AddCategori\";\nimport { GifGrid } from \"./components/GifGrid\";\nexport const GifExpertApp = () => {\n    //const categories=['Anime','Peliculas','Series']\n    const [categories, setCategories] = useState(['boku no hero']);\n    // const handleApp=()=>{\n    //     setCategories([...categories,'HunterXhunter'])\n        \n    // }\n    \n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategori setCategories={setCategories}/> \n            <hr/>\n            \n            <ol>\n                {categories.map(category=>(\n                    \n                    <GifGrid category={category} key={category} />\n                )\n                )}\n            </ol>\n            \n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n \n  <GifExpertApp/>,\n \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}